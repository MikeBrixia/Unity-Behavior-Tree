{
  "api/BT.BehaviorTreeGraphView.UxmlFactory.html": {
    "href": "api/BT.BehaviorTreeGraphView.UxmlFactory.html",
    "title": "Class BehaviorTreeGraphView.UxmlFactory | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeGraphView.UxmlFactory Namespace BT public class BehaviorTreeGraphView.UxmlFactory : BehaviorTreeGraphView.UxmlFactory<BehaviorTreeGraphView, UxmlTraits> Inheritance object BehaviorTreeGraphView.UxmlFactory"
  },
  "api/BT.BehaviorTreeGraphView.html": {
    "href": "api/BT.BehaviorTreeGraphView.html",
    "title": "Class BehaviorTreeGraphView | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeGraphView Namespace BT The behavior tree graph view in which the user is going to Create, move and delete behavior tree nodes public class BehaviorTreeGraphView : GraphView Inheritance object BehaviorTreeGraphView Constructors BehaviorTreeGraphView() public BehaviorTreeGraphView() Fields OnNodeSelected Called when the user select a node inside the graph public Action<BT_NodeView> OnNodeSelected Field Value Action<BT_NodeView> onNodeVisualElementSelected Called when the user select a node visual element inside the graph. Node visual element are all the nodes which can be attached to other nodes. public Action<BT_NodeVisualElement> onNodeVisualElementSelected Field Value Action<BT_NodeVisualElement> tree The tree the graph is currently focusing on public BehaviorTree tree Field Value BehaviorTree Methods AddToSelection(ISelectable) Handle node and node visual element selection public override void AddToSelection(ISelectable selectable) Parameters selectable ISelectable BuildContextualMenu(ContextualMenuPopulateEvent) Display contextual menu to track mouse position, display and handle nodes creation. public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters evt ContextualMenuPopulateEvent CreateAttachedNode(Type, BT_NodeView) Create a brand new node and attach it to a parent node public void CreateAttachedNode(Type nodeType, BT_NodeView parentNode) Parameters nodeType Type The type of the node visual element you want to create and attach parentNode BT_NodeView The Parent node to which the created node will be attached CreateDecoratorViewAttached(BT_Decorator, BT_NodeView, string) Create a decorator view and attach it to a parent node view public void CreateDecoratorViewAttached(BT_Decorator decorator, BT_NodeView parentNodeView, string filepath = \"Packages/com.ai.behavior-tree/Editor/BehaviorTree/BT Elements/DecoratorView.uxml\") Parameters decorator BT_Decorator The decorator node to attach parentNodeView BT_NodeView The view to which the decorator it's going to be attacched filepath string The filepath of the decorator view uxml to render on screen. CreateNode(Type, Vector2) Create a node and display it in the graph public void CreateNode(Type type, Vector2 nodePosition) Parameters type Type The type of the node you want to create nodePosition Vector2 The position of the node in the graph CreateServiceViewAttached(BT_Service, BT_NodeView, string) Create a service view and attach it to a parent node view public void CreateServiceViewAttached(BT_Service service, BT_NodeView parentNodeView, string filepath = \"Packages/com.ai.behavior-tree/Editor/BehaviorTree/BT Elements/ServiceView.uxml\") Parameters service BT_Service The decorator node to attach parentNodeView BT_NodeView The view to which the service it's going to be attacched filepath string The filepath of the service view uxml to render on screen. FindNodeView(BT_Node) public BT_NodeView FindNodeView(BT_Node Node) Parameters Node BT_Node Returns BT_NodeView GetCompatiblePorts(Port, NodeAdapter) Get a list of compatible ports. public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter) Parameters startPort Port nodeAdapter NodeAdapter Returns List<Port> A list of compatible ports PopulateView(BehaviorTree) Populate the graph by drawing all the nodes and links between them. public void PopulateView(BehaviorTree tree) Parameters tree BehaviorTree The Behavior Tree you want to display in the graph"
  },
  "api/BT.BehaviorTreeInspector.UxmlFactory.html": {
    "href": "api/BT.BehaviorTreeInspector.UxmlFactory.html",
    "title": "Class BehaviorTreeInspector.UxmlFactory | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeInspector.UxmlFactory Namespace BT public class BehaviorTreeInspector.UxmlFactory : BehaviorTreeInspector.UxmlFactory<BehaviorTreeInspector, UxmlTraits> Inheritance object BehaviorTreeInspector.UxmlFactory"
  },
  "api/BT.BehaviorTreeInspector.html": {
    "href": "api/BT.BehaviorTreeInspector.html",
    "title": "Class BehaviorTreeInspector | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeInspector Namespace BT public class BehaviorTreeInspector : VisualElement Inheritance object BehaviorTreeInspector Constructors BehaviorTreeInspector() public BehaviorTreeInspector() Methods UpdateInspector(BT_Node) Update the inspector view. public void UpdateInspector(BT_Node nodeToInspect) Parameters nodeToInspect BT_Node the node to inspect"
  },
  "api/BT.Editor.BT_DecoratorView.OnDecoratorSelected.html": {
    "href": "api/BT.Editor.BT_DecoratorView.OnDecoratorSelected.html",
    "title": "Delegate BT_DecoratorView.OnDecoratorSelected | Behavior Tree | 0.0.1",
    "keywords": "Delegate BT_DecoratorView.OnDecoratorSelected Namespace BT.Editor public delegate void BT_DecoratorView.OnDecoratorSelected(BT_DecoratorView decoratorViewSelected) Parameters decoratorViewSelected BT_DecoratorView"
  },
  "api/BT.Editor.BT_DecoratorView.html": {
    "href": "api/BT.Editor.BT_DecoratorView.html",
    "title": "Class BT_DecoratorView | Behavior Tree | 0.0.1",
    "keywords": "Class BT_DecoratorView Namespace BT.Editor Class used to display decorator view. public class BT_DecoratorView : BT_NodeVisualElement Inheritance object BT_NodeVisualElement BT_DecoratorView Inherited Members BT_NodeVisualElement.displayedName BT_NodeVisualElement.displayedDescription BT_NodeVisualElement.parentView BT_NodeVisualElement.node BT_NodeVisualElement.selectedCallback BT_NodeVisualElement.filepath BT_NodeVisualElement.InitializeViewInputOutput() BT_NodeVisualElement.OnMouseLeave(MouseLeaveEvent) BT_NodeVisualElement.OnMouseEnter(MouseEnterEvent) BT_NodeVisualElement.ShowSelectionBorder(VisualElement, float, Color) Constructors BT_DecoratorView(BT_NodeView, BT_Node, string) public BT_DecoratorView(BT_NodeView parentView, BT_Node node, string filepath) Parameters parentView BT_NodeView node BT_Node filepath string Methods InitializeUIElements() Initialize UI Elements for this node view. protected override void InitializeUIElements() OnSelected(MouseDownEvent) Called when this node gets selected. public override void OnSelected(MouseDownEvent eventData) Parameters eventData MouseDownEvent OnUnselected() Called when this node gets unselected. public override void OnUnselected()"
  },
  "api/BT.Editor.BT_NodeView.html": {
    "href": "api/BT.Editor.BT_NodeView.html",
    "title": "Class BT_NodeView | Behavior Tree | 0.0.1",
    "keywords": "Class BT_NodeView Namespace BT.Editor Base class for node views. public class BT_NodeView : Node Inheritance object BT_NodeView Constructors BT_NodeView(BT_Node, BehaviorTreeGraphView) public BT_NodeView(BT_Node node, BehaviorTreeGraphView graph) Parameters node BT_Node graph BehaviorTreeGraphView Fields OnNodeSelected Called when this node view gets selected by the user public Action<BT_NodeView> OnNodeSelected Field Value Action<BT_NodeView> parentView The parent view at which this node view is connected with it's input port public BT_NodeView parentView Field Value BT_NodeView Properties behaviorTreeGraph The graph which owns this node public BehaviorTreeGraphView behaviorTreeGraph { get; } Property Value BehaviorTreeGraphView decoratorViews decorator views containted inside this node view public List<BT_DecoratorView> decoratorViews { get; } Property Value List<BT_DecoratorView> decoratorsContainer Container for decorator nodes public VisualElement decoratorsContainer { get; } Property Value VisualElement input Input port of the node public Port input { get; } Property Value Port node Reference to the node encapsulated inside this node view, this value is going to contain the actual instructions of the node public BT_Node node { get; } Property Value BT_Node output Output port of the node public Port output { get; } Property Value Port serviceContainer Container service containers public VisualElement serviceContainer { get; } Property Value VisualElement serviceViews service views containted inside this node view public List<BT_ServiceView> serviceViews { get; } Property Value List<BT_ServiceView> Methods BuildContextualMenu(ContextualMenuPopulateEvent) Create contextual menu to handle node visual element creation. public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters evt ContextualMenuPopulateEvent Draw() Draw basic node layout public virtual void Draw() OnSelected() Called when this node view gets selected. public override void OnSelected() OnUnselected() Called when this node view gets unselected. public override void OnUnselected() SetPosition(Rect) Set the position of this node view. public override void SetPosition(Rect newPos) Parameters newPos Rect ShowSelectionBorder(float) Show or hide node border. public void ShowSelectionBorder(float width) Parameters width float the width of node border SortChildrenNodes() Show or hide node border. public void SortChildrenNodes()"
  },
  "api/BT.Editor.BT_NodeVisualElement.html": {
    "href": "api/BT.Editor.BT_NodeVisualElement.html",
    "title": "Class BT_NodeVisualElement | Behavior Tree | 0.0.1",
    "keywords": "Class BT_NodeVisualElement Namespace BT.Editor A visual element which can be attached to a BT node public abstract class BT_NodeVisualElement : VisualElement Inheritance object BT_NodeVisualElement Derived BT_DecoratorView BT_ServiceView Constructors BT_NodeVisualElement(BT_NodeView, BT_Node, string) public BT_NodeVisualElement(BT_NodeView parentView, BT_Node node, string filepath) Parameters parentView BT_NodeView node BT_Node filepath string Fields displayedDescription public string displayedDescription Field Value string displayedName public string displayedName Field Value string filepath the filepath of the visual element uxml. protected string filepath Field Value string node The node contained inside this behavior tree visual element. public BT_Node node Field Value BT_Node parentView The parent view of this visual element. public BT_NodeView parentView Field Value BT_NodeView selectedCallback Callback which is called when the decorator view gets selected. public Action<BT_NodeVisualElement> selectedCallback Field Value Action<BT_NodeVisualElement> Methods InitializeUIElements() Called on node view creation and used to initialize UI elements for this node view. protected abstract void InitializeUIElements() InitializeViewInputOutput() Called on node view creation and used to initialize custom input events for this visual element. protected virtual void InitializeViewInputOutput() OnMouseEnter(MouseEnterEvent) Called when the mouse cursor enters the visual element. protected virtual void OnMouseEnter(MouseEnterEvent evt) Parameters evt MouseEnterEvent Mouse event OnMouseLeave(MouseLeaveEvent) Called when the mouse cursor leaves the visual element. protected virtual void OnMouseLeave(MouseLeaveEvent evt) Parameters evt MouseLeaveEvent Mouse event OnSelected(MouseDownEvent) Called when this visual element gets selected. public virtual void OnSelected(MouseDownEvent evt) Parameters evt MouseDownEvent Mouse event OnUnselected() Called when this visual element gets unselected. public abstract void OnUnselected() ShowSelectionBorder(VisualElement, float, Color) Modify selection border display. protected void ShowSelectionBorder(VisualElement element, float width, Color borderColor) Parameters element VisualElement the element you want to modify it's border width float the width of the border borderColor Color the color of the border"
  },
  "api/BT.Editor.BT_ServiceView.html": {
    "href": "api/BT.Editor.BT_ServiceView.html",
    "title": "Class BT_ServiceView | Behavior Tree | 0.0.1",
    "keywords": "Class BT_ServiceView Namespace BT.Editor Class used to display service views. public class BT_ServiceView : BT_NodeVisualElement Inheritance object BT_NodeVisualElement BT_ServiceView Inherited Members BT_NodeVisualElement.displayedName BT_NodeVisualElement.displayedDescription BT_NodeVisualElement.parentView BT_NodeVisualElement.node BT_NodeVisualElement.selectedCallback BT_NodeVisualElement.filepath BT_NodeVisualElement.InitializeViewInputOutput() BT_NodeVisualElement.ShowSelectionBorder(VisualElement, float, Color) Constructors BT_ServiceView(BT_NodeView, BT_Node, string) public BT_ServiceView(BT_NodeView parentView, BT_Node node, string filepath) Parameters parentView BT_NodeView node BT_Node filepath string Methods InitializeUIElements() Called on node view creation and used to initialize UI elements for this node view. protected override void InitializeUIElements() OnMouseEnter(MouseEnterEvent) Called when the mouse cursor enters the visual element. protected override void OnMouseEnter(MouseEnterEvent evt) Parameters evt MouseEnterEvent Mouse event OnMouseLeave(MouseLeaveEvent) Called when the mouse cursor leaves the visual element. protected override void OnMouseLeave(MouseLeaveEvent evt) Parameters evt MouseLeaveEvent Mouse event OnSelected(MouseDownEvent) Called when this service view it's selected public override void OnSelected(MouseDownEvent evt) Parameters evt MouseDownEvent OnUnselected() Called when this service view it's unselected public override void OnUnselected()"
  },
  "api/BT.Editor.BehaviorTreeEditor.html": {
    "href": "api/BT.Editor.BehaviorTreeEditor.html",
    "title": "Class BehaviorTreeEditor | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeEditor Namespace BT.Editor public class BehaviorTreeEditor : EditorWindow Inheritance object BehaviorTreeEditor Methods CreateGUI() Create behavior tree editor GUI. public void CreateGUI() OpenEditor(int, int) Open the behavior tree editor. public static bool OpenEditor(int instanceID, int line) Parameters instanceID int line int Returns bool OpenWindow() Open the behavior tree editor window. public static void OpenWindow()"
  },
  "api/BT.Editor.BehaviorTreeSelectionManager.html": {
    "href": "api/BT.Editor.BehaviorTreeSelectionManager.html",
    "title": "Class BehaviorTreeSelectionManager | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeSelectionManager Namespace BT.Editor Handles the selection events in the behavior tree editor public static class BehaviorTreeSelectionManager Inheritance object BehaviorTreeSelectionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties hoverObject The object on which the mouse is currently hovering public static object hoverObject { get; set; } Property Value object selectedObject The currently selected object public static object selectedObject { get; set; } Property Value object"
  },
  "api/BT.Editor.BlackboardInspector.UxmlFactory.html": {
    "href": "api/BT.Editor.BlackboardInspector.UxmlFactory.html",
    "title": "Class BlackboardInspector.UxmlFactory | Behavior Tree | 0.0.1",
    "keywords": "Class BlackboardInspector.UxmlFactory Namespace BT.Editor public class BlackboardInspector.UxmlFactory : BlackboardInspector.UxmlFactory<BlackboardInspector, UxmlTraits> Inheritance object BlackboardInspector.UxmlFactory"
  },
  "api/BT.Editor.BlackboardInspector.html": {
    "href": "api/BT.Editor.BlackboardInspector.html",
    "title": "Class BlackboardInspector | Behavior Tree | 0.0.1",
    "keywords": "Class BlackboardInspector Namespace BT.Editor public class BlackboardInspector : VisualElement Inheritance object BlackboardInspector Methods UpdateInspector(BehaviorTree) Update inspector view public void UpdateInspector(BehaviorTree blackboardToInspect) Parameters blackboardToInspect BehaviorTree"
  },
  "api/BT.Editor.NodeInspector.OnValueChange-1.html": {
    "href": "api/BT.Editor.NodeInspector.OnValueChange-1.html",
    "title": "Delegate NodeInspector.OnValueChange<PropertyType> | Behavior Tree | 0.0.1",
    "keywords": "Delegate NodeInspector.OnValueChange<PropertyType> Namespace BT.Editor public delegate void NodeInspector.OnValueChange<PropertyType>(PropertyType PropertyChanged) Parameters PropertyChanged PropertyType Type Parameters PropertyType"
  },
  "api/BT.Editor.NodeInspector.html": {
    "href": "api/BT.Editor.NodeInspector.html",
    "title": "Class NodeInspector | Behavior Tree | 0.0.1",
    "keywords": "Class NodeInspector Namespace BT.Editor Custom inspector which handles nodes value changes and reflect them in to the displayed node public class NodeInspector : UnityEditor.Editor Inheritance object NodeInspector Constructors NodeInspector() public NodeInspector() Fields onNodeDescriptionChange public NodeInspector.OnValueChange<string> onNodeDescriptionChange Field Value NodeInspector.OnValueChange<string> onNodeNameChange public NodeInspector.OnValueChange<string> onNodeNameChange Field Value NodeInspector.OnValueChange<string> Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/BT.Editor.NodeView.html": {
    "href": "api/BT.Editor.NodeView.html",
    "title": "Class NodeView | Behavior Tree | 0.0.1",
    "keywords": "Class NodeView Namespace BT.Editor Base class for all node views. public abstract class NodeView : Node Inheritance object NodeView Properties node The node contained inside this node view public NodeBase node { get; protected set; } Property Value NodeBase Methods SetPosition(Rect) Set the position of this node view. public override void SetPosition(Rect newPos) Parameters newPos Rect"
  },
  "api/BT.Editor.html": {
    "href": "api/BT.Editor.html",
    "title": "Namespace BT.Editor | Behavior Tree | 0.0.1",
    "keywords": "Namespace BT.Editor Classes BT_DecoratorView Class used to display decorator view. BT_NodeView Base class for node views. BT_NodeVisualElement A visual element which can be attached to a BT node BT_ServiceView Class used to display service views. BehaviorTreeEditor BehaviorTreeSelectionManager Handles the selection events in the behavior tree editor BlackboardInspector BlackboardInspector.UxmlFactory NodeInspector Custom inspector which handles nodes value changes and reflect them in to the displayed node NodeView Base class for all node views. Delegates BT_DecoratorView.OnDecoratorSelected NodeInspector.OnValueChange<PropertyType>"
  },
  "api/BT.Runtime.BT_ActionNode.html": {
    "href": "api/BT.Runtime.BT_ActionNode.html",
    "title": "Class BT_ActionNode | Behavior Tree | 0.0.1",
    "keywords": "Class BT_ActionNode Namespace BT.Runtime Behavior Tree action node. Actions are nodes with one input and no outputs, which are responsible of executing different tasks such as making the AI wait for a given amount of time or chasing the player. Actions can have decorators and services nodes attached to them and will execute both before executing their own logic. public abstract class BT_ActionNode : BT_Node Inheritance object NodeBase BT_Node BT_ActionNode Derived Log Wait Inherited Members BT_Node.blackboard BT_Node.isStarted BT_Node.OnStart() BT_Node.OnStop() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state Fields decorators The decorators attached to this action public List<BT_Decorator> decorators Field Value List<BT_Decorator> services The services attached to this action public List<BT_Service> services Field Value List<BT_Service> Methods Clone() Make a copy of this action asset public override NodeBase Clone() Returns NodeBase A copy of this action asset Execute() Called when the behavior tree wants to execute this action. Put here all the code you want this action to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this action has been executed successfully, RUNNING if is still executing and FAILED if the action has failed to execute it's tasks. ExecuteNode() Called when the Behavior Tree wants to start executing this action. This method will execute all decorators and if the result is successfull it will continue by executing first all services and then this action. public override EBehaviorTreeState ExecuteNode() Returns EBehaviorTreeState The result of this action"
  },
  "api/BT.Runtime.BT_CompositeNode.html": {
    "href": "api/BT.Runtime.BT_CompositeNode.html",
    "title": "Class BT_CompositeNode | Behavior Tree | 0.0.1",
    "keywords": "Class BT_CompositeNode Namespace BT.Runtime Composites nodes are the roots of branches in the tree and define how a specific branch should execute and what rules should it follow. This node have 1 input and multiple outputs(Childrens) public abstract class BT_CompositeNode : BT_Node Inheritance object NodeBase BT_Node BT_CompositeNode Derived BT_Selector Loop SequenceNode Inherited Members BT_Node.blackboard BT_Node.isStarted BT_Node.OnStart() BT_Node.OnStop() BT_Node.Execute() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state Fields childrens The childrens this composite should try to execute. public List<BT_Node> childrens Field Value List<BT_Node> decorators Decorators attached to this composite public List<BT_Decorator> decorators Field Value List<BT_Decorator> executedChildrenIndex Execution index which keeps track of which node this composite should try to execute during a tree update. protected int executedChildrenIndex Field Value int services Services attacehd to this composite public List<BT_Service> services Field Value List<BT_Service> Methods Clone() Make a copy of this composite asset public override NodeBase Clone() Returns NodeBase A copy of this composite asset. ExecuteNode() Called when the Behavior Tree wants to execute this composite, This method will execute all decorators and if the result is successfull it will continue by executing first all services and then this composite. public override EBehaviorTreeState ExecuteNode() Returns EBehaviorTreeState The result of this composite"
  },
  "api/BT.Runtime.BT_Decorator.html": {
    "href": "api/BT.Runtime.BT_Decorator.html",
    "title": "Class BT_Decorator | Behavior Tree | 0.0.1",
    "keywords": "Class BT_Decorator Namespace BT.Runtime Decorators are nodes which can be attached to composite and action nodes and are used as conditional nodes, to determine if a certain branch or task should be executed or not. public abstract class BT_Decorator : BT_Node Inheritance object NodeBase BT_Node BT_Decorator Derived BlackboardDecorator Inherited Members BT_Node.blackboard BT_Node.isStarted BT_Node.OnStart() BT_Node.OnStop() BT_Node.ExecuteNode() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state Methods Clone() Make a copy of this decorator asset public override NodeBase Clone() Returns NodeBase A copy of this decorator asset. Execute() Called when the behavior tree wants to execute this decorator. Put here all the code you want this action to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this decorator has been executed successfully, RUNNING if is still executing and FAILED if the action has failed to execute it's tasks."
  },
  "api/BT.Runtime.BT_Node.html": {
    "href": "api/BT.Runtime.BT_Node.html",
    "title": "Class BT_Node | Behavior Tree | 0.0.1",
    "keywords": "Class BT_Node Namespace BT.Runtime Base class for all behavior tree nodes which contains the base logic for how a behavior tree node should behave. public abstract class BT_Node : NodeBase Inheritance object NodeBase BT_Node Derived BT_ActionNode BT_CompositeNode BT_Decorator BT_RootNode BT_Service Inherited Members NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state NodeBase.Clone() Fields isStarted public bool isStarted Field Value bool Properties blackboard public Blackboard blackboard { get; set; } Property Value Blackboard Methods Execute() Called when the behavior tree wants to execute this node. Put here all the code you want this node to execute. public abstract EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this node has been executed successfully, RUNNING if is still executing and FAILED if the node has failed to execute it's tasks. ExecuteNode() Called when the Behavior Tree wants to execute this node, if not already started this node will start it's execution and call OnStart_Internal(), then it will execute this node instructions and if the result was Success or Failed it will call OnStop_Internal(). public virtual EBehaviorTreeState ExecuteNode() Returns EBehaviorTreeState The result of this node OnStart() Called when this node has started it's execution protected abstract void OnStart() OnStop() Called when this node has succeded or failed it's execution protected abstract void OnStop()"
  },
  "api/BT.Runtime.BT_RootNode.html": {
    "href": "api/BT.Runtime.BT_RootNode.html",
    "title": "Class BT_RootNode | Behavior Tree | 0.0.1",
    "keywords": "Class BT_RootNode Namespace BT.Runtime public sealed class BT_RootNode : BT_Node Inheritance object NodeBase BT_Node BT_RootNode Inherited Members BT_Node.blackboard BT_Node.isStarted BT_Node.ExecuteNode() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position Constructors BT_RootNode() public BT_RootNode() Fields childNode The root of the Behavior Tree, execution will start with this node public BT_Node childNode Field Value BT_Node Methods Clone() Make a copy this root node asset. public override NodeBase Clone() Returns NodeBase Execute() Called when the behavior tree wants to execute this node. Put here all the code you want this node to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this node has been executed successfully, RUNNING if is still executing and FAILED if the node has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.BT_Selector.html": {
    "href": "api/BT.Runtime.BT_Selector.html",
    "title": "Class BT_Selector | Behavior Tree | 0.0.1",
    "keywords": "Class BT_Selector Namespace BT.Runtime This composite node will execute all childrens nodes from left to right and stop when one of them succeds. if all children fails, this node also fails. public sealed class BT_Selector : BT_CompositeNode Inheritance object NodeBase BT_Node BT_CompositeNode BT_Selector Inherited Members BT_CompositeNode.childrens BT_CompositeNode.decorators BT_CompositeNode.services BT_CompositeNode.ExecuteNode() BT_CompositeNode.Clone() BT_Node.blackboard BT_Node.isStarted NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position Constructors BT_Selector() public BT_Selector() Methods Execute() Called when the behavior tree wants to execute this node. Put here all the code you want this node to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this node has been executed successfully, RUNNING if is still executing and FAILED if the node has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.BT_Service.html": {
    "href": "api/BT.Runtime.BT_Service.html",
    "title": "Class BT_Service | Behavior Tree | 0.0.1",
    "keywords": "Class BT_Service Namespace BT.Runtime Services are parallel nodes which can be attached to composites and actions and will be executed at their defined frequency as long as their branch is being executed. at the moment Services are NOT multithreaded by default! public abstract class BT_Service : BT_Node Inheritance object NodeBase BT_Node BT_Service Inherited Members BT_Node.blackboard BT_Node.isStarted BT_Node.OnStart() BT_Node.OnStop() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state NodeBase.Clone() Fields updateInterval public float updateInterval Field Value float updateOnStart If true this service will update when started, if false it will wait for the update interval to perform the first update. public bool updateOnStart Field Value bool Methods Execute() Called when the behavior tree wants to execute this service. Put here all the code you want this service to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState The return value of service nodes doesn't matter. ExecuteNode() Called when the Behavior Tree wants to execute this service, This method will call OnStart_Internal if the service has not already started and then it will update this service. public override EBehaviorTreeState ExecuteNode() Returns EBehaviorTreeState The result of this service(service results doesn't matter) OnUpdate() Called each update at UpdateInterval time protected abstract void OnUpdate()"
  },
  "api/BT.Runtime.BehaviorTree.html": {
    "href": "api/BT.Runtime.BehaviorTree.html",
    "title": "Class BehaviorTree | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTree Namespace BT.Runtime Behavior Tree asset which contains all the data needed from the BehaviorTreeComponent to make it run. Behavior Tree execute from left to right and from top to bottom public sealed class BehaviorTree : ScriptableObject Inheritance object BehaviorTree Fields blackboard The blackboard used by this behavior tree public Blackboard blackboard Field Value Blackboard canTick if true, the beavior tree is going to update each frame, otherwise it will use a user defined update interval(updateInterval). public bool canTick Field Value bool nodes All the Behavior Tree nodes public List<BT_Node> nodes Field Value List<BT_Node> rootNode The root node of this behavior tree public BT_RootNode rootNode Field Value BT_RootNode treeState The current state of this Behavior Tree. public EBehaviorTreeState treeState Field Value EBehaviorTreeState updateInterval The rate at which the behavior tree it's going to be updated. If canTick is set to true this value will be ignored. public float updateInterval Field Value float Methods Clone() Clone this behavior tree asset public BehaviorTree Clone() Returns BehaviorTree A copy of this Behavior Tree asset"
  },
  "api/BT.Runtime.BehaviorTreeComponent.html": {
    "href": "api/BT.Runtime.BehaviorTreeComponent.html",
    "title": "Class BehaviorTreeComponent | Behavior Tree | 0.0.1",
    "keywords": "Class BehaviorTreeComponent Namespace BT.Runtime The component responsible of running the behavior tree. public class BehaviorTreeComponent : MonoBehaviour Inheritance object BehaviorTreeComponent Properties behaviorTreeState The state of the currently running Behavior Tree public EBehaviorTreeState behaviorTreeState { get; } Property Value EBehaviorTreeState blackboard The blackboard component used by currently assigned Behavior Tree public Blackboard blackboard { get; } Property Value Blackboard Methods RunBehaviorTree(BehaviorTree) Start running a behavior tree public void RunBehaviorTree(BehaviorTree behaviorTree) Parameters behaviorTree BehaviorTree The behavior tree you want to run."
  },
  "api/BT.Runtime.Blackboard.html": {
    "href": "api/BT.Runtime.Blackboard.html",
    "title": "Class Blackboard | Behavior Tree | 0.0.1",
    "keywords": "Class Blackboard Namespace BT.Runtime The blackboard is the \"brain\" of the Behavior Tree, responsible of storing relevant data, used to make it's own decision. The blackboard supports a limited number of types which can be used by the tree, see BlackboardSupportedTypes in BlackboardPropertyBase for more info. public class Blackboard : ScriptableObject, ISerializationCallbackReceiver Inheritance object Blackboard Implements ISerializationCallbackReceiver Methods Clone() Clone this blackboard asset. public Blackboard Clone() Returns Blackboard A copy of this blackboard asset. GetBlackboardValueByKey<T>(string) Get a blackboard value of type T by it's key. public T GetBlackboardValueByKey<T>(string key) Parameters key string the blackboard key used to search for the value Returns T The value of type T associated with the given blackboard key. Type Parameters T OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize() SetBlackbordValue<T>(string, T) Set the blackboard value of type T associated with the given key public void SetBlackbordValue<T>(string key, T newValue) Parameters key string the blackboard key used to search and set the blackboard property. newValue T the new property value of type T Type Parameters T"
  },
  "api/BT.Runtime.BlackboardDecorator.html": {
    "href": "api/BT.Runtime.BlackboardDecorator.html",
    "title": "Class BlackboardDecorator | Behavior Tree | 0.0.1",
    "keywords": "Class BlackboardDecorator Namespace BT.Runtime This decorator it's going to check a blackboard Boolean value and return Success if the bool value is true, false otherwise. public sealed class BlackboardDecorator : BT_Decorator Inheritance object NodeBase BT_Node BT_Decorator BlackboardDecorator Inherited Members BT_Decorator.Clone() BT_Node.blackboard BT_Node.isStarted BT_Node.ExecuteNode() NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position Constructors BlackboardDecorator() public BlackboardDecorator() Fields blackboardKey The blackboard key those value is needed to evaluate the condition. public string blackboardKey Field Value string Methods Execute() Called when the behavior tree wants to execute this decorator. Put here all the code you want this action to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this decorator has been executed successfully, RUNNING if is still executing and FAILED if the action has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.BlackboardProperty-1.html": {
    "href": "api/BT.Runtime.BlackboardProperty-1.html",
    "title": "Class BlackboardProperty<TValueType> | Behavior Tree | 0.0.1",
    "keywords": "Class BlackboardProperty<TValueType> Namespace BT.Runtime public class BlackboardProperty<TValueType> : BlackboardPropertyBase Type Parameters TValueType Inheritance object BlackboardPropertyBase BlackboardProperty<TValueType> Inherited Members BlackboardPropertyBase.name BlackboardPropertyBase.valueType BlackboardPropertyBase.variableType BlackboardPropertyBase.CreateProperty() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BlackboardProperty(string, BlackboardSupportedTypes, TValueType) public BlackboardProperty(string name, BlackboardSupportedTypes valueType, TValueType value) Parameters name string valueType BlackboardSupportedTypes value TValueType Fields value public TValueType value Field Value TValueType"
  },
  "api/BT.Runtime.BlackboardPropertyBase.html": {
    "href": "api/BT.Runtime.BlackboardPropertyBase.html",
    "title": "Class BlackboardPropertyBase | Behavior Tree | 0.0.1",
    "keywords": "Class BlackboardPropertyBase Namespace BT.Runtime [Serializable] public class BlackboardPropertyBase Inheritance object BlackboardPropertyBase Derived BlackboardProperty<TValueType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields name The name of this blackboard property public string name Field Value string valueType The value type of this property public BlackboardSupportedTypes valueType Field Value BlackboardSupportedTypes variableType The value type of this property public BlackboardVariableType variableType Field Value BlackboardVariableType Methods CreateProperty() Initialize this property with the given type default value. public BlackboardPropertyBase CreateProperty() Returns BlackboardPropertyBase A copy of this property initialized with it's value type"
  },
  "api/BT.Runtime.BlackboardSupportedTypes.html": {
    "href": "api/BT.Runtime.BlackboardSupportedTypes.html",
    "title": "Enum BlackboardSupportedTypes | Behavior Tree | 0.0.1",
    "keywords": "Enum BlackboardSupportedTypes Namespace BT.Runtime The blackboard supported value types public enum BlackboardSupportedTypes Fields Boolean = 0 Primitive bool type. Color = 9 Unity Color type. Double = 7 Primitive double type. Float = 1 Primitive float type. GameObject = 2 Unity GameObject type. Integer = 8 Primitive int type. Quaternion = 5 Unity Quaternion type String = 6 Primitive string type. Vector2 = 3 Unity Vector2 type. Vector3 = 4 Unity Vector3 type."
  },
  "api/BT.Runtime.BlackboardVariableType.html": {
    "href": "api/BT.Runtime.BlackboardVariableType.html",
    "title": "Enum BlackboardVariableType | Behavior Tree | 0.0.1",
    "keywords": "Enum BlackboardVariableType Namespace BT.Runtime public enum BlackboardVariableType Fields CStyleArray = 1 HashSet = 3 List = 2 Variable = 0"
  },
  "api/BT.Runtime.EBehaviorTreeState.html": {
    "href": "api/BT.Runtime.EBehaviorTreeState.html",
    "title": "Enum EBehaviorTreeState | Behavior Tree | 0.0.1",
    "keywords": "Enum EBehaviorTreeState Namespace BT.Runtime Behavior Tree possible states. public enum EBehaviorTreeState Fields Failed = 2 Running = 0 Success = 1 Waiting = 3"
  },
  "api/BT.Runtime.Log.html": {
    "href": "api/BT.Runtime.Log.html",
    "title": "Class Log | Behavior Tree | 0.0.1",
    "keywords": "Class Log Namespace BT.Runtime Action node which logs a message to the unity console public class Log : BT_ActionNode Inheritance object NodeBase BT_Node BT_ActionNode Log Inherited Members BT_ActionNode.decorators BT_ActionNode.services BT_ActionNode.ExecuteNode() BT_ActionNode.Clone() BT_Node.blackboard BT_Node.isStarted NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state Constructors Log() public Log() Fields debugMessage The log message public string debugMessage Field Value string Methods Execute() Log a message to the Unity console public override EBehaviorTreeState Execute() Returns EBehaviorTreeState OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.Loop.html": {
    "href": "api/BT.Runtime.Loop.html",
    "title": "Class Loop | Behavior Tree | 0.0.1",
    "keywords": "Class Loop Namespace BT.Runtime This composite node it's gonna loop a given number of times through it's childrens before returning success. If all loops are successfull this node is going to succed, if even one loop fails this node it's going to fail. public sealed class Loop : BT_CompositeNode Inheritance object NodeBase BT_Node BT_CompositeNode Loop Inherited Members BT_CompositeNode.childrens BT_CompositeNode.decorators BT_CompositeNode.services BT_CompositeNode.ExecuteNode() BT_CompositeNode.Clone() BT_Node.blackboard BT_Node.isStarted NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position Constructors Loop() public Loop() Fields loopNumber The number of loops you want this composite to perform. public int loopNumber Field Value int Methods Execute() Called when the behavior tree wants to execute this node. Put here all the code you want this node to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this node has been executed successfully, RUNNING if is still executing and FAILED if the node has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.NodeBase.html": {
    "href": "api/BT.Runtime.NodeBase.html",
    "title": "Class NodeBase | Behavior Tree | 0.0.1",
    "keywords": "Class NodeBase Namespace BT.Runtime public abstract class NodeBase : ScriptableObject Inheritance object NodeBase Derived BT_Node Constructors NodeBase() public NodeBase() Fields description Editable description of what this node does. public string description Field Value string nodeName Custom node name which can be defined by the user. public string nodeName Field Value string nodeTypeName The name type name of the node. public string nodeTypeName Field Value string position The position of this node in the graph public Vector2 position Field Value Vector2 state The current state of this specific node protected EBehaviorTreeState state Field Value EBehaviorTreeState Methods Clone() public virtual NodeBase Clone() Returns NodeBase"
  },
  "api/BT.Runtime.SequenceNode.html": {
    "href": "api/BT.Runtime.SequenceNode.html",
    "title": "Class SequenceNode | Behavior Tree | 0.0.1",
    "keywords": "Class SequenceNode Namespace BT.Runtime This composite node it's going to execute all it's childrens from left to right and stop when one fails, if all children nodes succeds this composite succeds, if even one Children fails this composite it's going to fail. public sealed class SequenceNode : BT_CompositeNode Inheritance object NodeBase BT_Node BT_CompositeNode SequenceNode Inherited Members BT_CompositeNode.childrens BT_CompositeNode.decorators BT_CompositeNode.services BT_CompositeNode.ExecuteNode() BT_CompositeNode.Clone() BT_Node.blackboard BT_Node.isStarted NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position Constructors SequenceNode() public SequenceNode() Methods Execute() Called when the behavior tree wants to execute this node. Put here all the code you want this node to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this node has been executed successfully, RUNNING if is still executing and FAILED if the node has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.Wait.html": {
    "href": "api/BT.Runtime.Wait.html",
    "title": "Class Wait | Behavior Tree | 0.0.1",
    "keywords": "Class Wait Namespace BT.Runtime Make the behavior tree wait for a given amount of time before continuing executing the next instructions. public class Wait : BT_ActionNode Inheritance object NodeBase BT_Node BT_ActionNode Wait Inherited Members BT_ActionNode.decorators BT_ActionNode.services BT_ActionNode.ExecuteNode() BT_ActionNode.Clone() BT_Node.blackboard BT_Node.isStarted NodeBase.nodeName NodeBase.nodeTypeName NodeBase.description NodeBase.position NodeBase.state Fields time The time the tree is going to wait public float time Field Value float Methods Execute() Called when the behavior tree wants to execute this action. Put here all the code you want this action to execute. public override EBehaviorTreeState Execute() Returns EBehaviorTreeState SUCCESS if this action has been executed successfully, RUNNING if is still executing and FAILED if the action has failed to execute it's tasks. OnStart() Called when this node has started it's execution protected override void OnStart() OnStop() Called when this node has succeded or failed it's execution protected override void OnStop()"
  },
  "api/BT.Runtime.html": {
    "href": "api/BT.Runtime.html",
    "title": "Namespace BT.Runtime | Behavior Tree | 0.0.1",
    "keywords": "Namespace BT.Runtime Classes BT_ActionNode Behavior Tree action node. Actions are nodes with one input and no outputs, which are responsible of executing different tasks such as making the AI wait for a given amount of time or chasing the player. Actions can have decorators and services nodes attached to them and will execute both before executing their own logic. BT_CompositeNode Composites nodes are the roots of branches in the tree and define how a specific branch should execute and what rules should it follow. This node have 1 input and multiple outputs(Childrens) BT_Decorator Decorators are nodes which can be attached to composite and action nodes and are used as conditional nodes, to determine if a certain branch or task should be executed or not. BT_Node Base class for all behavior tree nodes which contains the base logic for how a behavior tree node should behave. BT_RootNode BT_Selector This composite node will execute all childrens nodes from left to right and stop when one of them succeds. if all children fails, this node also fails. BT_Service Services are parallel nodes which can be attached to composites and actions and will be executed at their defined frequency as long as their branch is being executed. at the moment Services are NOT multithreaded by default! BehaviorTree Behavior Tree asset which contains all the data needed from the BehaviorTreeComponent to make it run. Behavior Tree execute from left to right and from top to bottom BehaviorTreeComponent The component responsible of running the behavior tree. Blackboard The blackboard is the \"brain\" of the Behavior Tree, responsible of storing relevant data, used to make it's own decision. The blackboard supports a limited number of types which can be used by the tree, see BlackboardSupportedTypes in BlackboardPropertyBase for more info. BlackboardDecorator This decorator it's going to check a blackboard Boolean value and return Success if the bool value is true, false otherwise. BlackboardPropertyBase BlackboardProperty<TValueType> Log Action node which logs a message to the unity console Loop This composite node it's gonna loop a given number of times through it's childrens before returning success. If all loops are successfull this node is going to succed, if even one loop fails this node it's going to fail. NodeBase SequenceNode This composite node it's going to execute all it's childrens from left to right and stop when one fails, if all children nodes succeds this composite succeds, if even one Children fails this composite it's going to fail. Wait Make the behavior tree wait for a given amount of time before continuing executing the next instructions. Enums BlackboardSupportedTypes The blackboard supported value types BlackboardVariableType EBehaviorTreeState Behavior Tree possible states."
  },
  "api/BT.html": {
    "href": "api/BT.html",
    "title": "Namespace BT | Behavior Tree | 0.0.1",
    "keywords": "Namespace BT Classes BehaviorTreeGraphView The behavior tree graph view in which the user is going to Create, move and delete behavior tree nodes BehaviorTreeGraphView.UxmlFactory BehaviorTreeInspector BehaviorTreeInspector.UxmlFactory"
  },
  "api/Global.BTInstaller.html": {
    "href": "api/Global.BTInstaller.html",
    "title": "Class BTInstaller | Behavior Tree | 0.0.1",
    "keywords": "Class BTInstaller Namespace Global public static class BTInstaller Inheritance object BTInstaller Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Global.SplitView.UxmlFactory.html": {
    "href": "api/Global.SplitView.UxmlFactory.html",
    "title": "Class SplitView.UxmlFactory | Behavior Tree | 0.0.1",
    "keywords": "Class SplitView.UxmlFactory Namespace Global public class SplitView.UxmlFactory : SplitView.UxmlFactory<SplitView, UxmlTraits> Inheritance object SplitView.UxmlFactory"
  },
  "api/Global.SplitView.html": {
    "href": "api/Global.SplitView.html",
    "title": "Class SplitView | Behavior Tree | 0.0.1",
    "keywords": "Class SplitView Namespace Global public class SplitView : TwoPaneSplitView Inheritance object SplitView Constructors SplitView() public SplitView()"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | Behavior Tree | 0.0.1",
    "keywords": "Namespace Classes BTInstaller SplitView SplitView.UxmlFactory"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Behavior Tree | 0.0.1",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Behavior Tree | 0.0.1",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Behavior Tree | 0.0.1",
    "keywords": "MIT License Copyright (c) 2022 Michael Guida Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}